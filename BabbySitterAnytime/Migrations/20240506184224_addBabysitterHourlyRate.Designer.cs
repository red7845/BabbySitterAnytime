// <auto-generated />
using System;
using BabbySitterAnytime.DataBaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BabbySitterAnytime.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240506184224_addBabysitterHourlyRate")]
    partial class addBabysitterHourlyRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BabySitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BabySitterId");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a7805a8-486f-4113-9538-67e172fd74f8"),
                            Name = "Syntagma"
                        },
                        new
                        {
                            Id = new Guid("8b937be0-dad2-42f1-b1af-6acd7a256f8f"),
                            Name = "Plaka"
                        },
                        new
                        {
                            Id = new Guid("81f019bb-90b0-4a2c-8f5e-f72f1e1aa962"),
                            Name = "Monastiraki"
                        },
                        new
                        {
                            Id = new Guid("75392fe5-2af9-4a3a-b32e-27fadfbc10a8"),
                            Name = "Kolonaki"
                        },
                        new
                        {
                            Id = new Guid("1d9d9ae3-bef1-4374-aaee-eefc14d83fd1"),
                            Name = "Exarchia"
                        },
                        new
                        {
                            Id = new Guid("44ac2306-8c24-481e-818d-aca9d0854c99"),
                            Name = "Psiri"
                        },
                        new
                        {
                            Id = new Guid("0d58f2a5-7811-40f6-8a00-ac241f3ff4f6"),
                            Name = "Gazi"
                        },
                        new
                        {
                            Id = new Guid("4a6d952c-2285-4b26-8cc8-3b651e6104e1"),
                            Name = "Pangrati"
                        },
                        new
                        {
                            Id = new Guid("55ee76dc-2ddc-4120-b58e-be2a8c7b3f1b"),
                            Name = "Metaxourgeio"
                        },
                        new
                        {
                            Id = new Guid("288defe8-6d3e-468f-92dc-8487b869d43f"),
                            Name = "Koukaki"
                        },
                        new
                        {
                            Id = new Guid("0e21a594-1514-41bc-9a17-231eaf964981"),
                            Name = "Kypseli"
                        },
                        new
                        {
                            Id = new Guid("318fb0d5-841d-47b0-b477-e3bb6a20bede"),
                            Name = "Thissio"
                        },
                        new
                        {
                            Id = new Guid("18727d19-93f5-49df-86f3-b273145ad464"),
                            Name = "Petralona"
                        },
                        new
                        {
                            Id = new Guid("48c27ff1-bfda-4773-afb5-0b0d9cdcaef2"),
                            Name = "Neapoli"
                        },
                        new
                        {
                            Id = new Guid("f35cc06a-6f1b-4c76-a32a-0c42b840e3d6"),
                            Name = "Lykavittos"
                        },
                        new
                        {
                            Id = new Guid("b9b27f5f-825f-454e-9cd4-f92ec5f6dd82"),
                            Name = "Neos Kosmos"
                        },
                        new
                        {
                            Id = new Guid("e9eff8b5-6079-4b2c-9670-2ab0fc9a3e0a"),
                            Name = "Agios Dimitrios"
                        },
                        new
                        {
                            Id = new Guid("859ec619-cce9-4de1-a7d8-a5be4fe74c73"),
                            Name = "Piraeus"
                        },
                        new
                        {
                            Id = new Guid("85d741bf-a86b-48ce-9e35-8f484064abba"),
                            Name = "Marousi"
                        },
                        new
                        {
                            Id = new Guid("7b515601-5e47-4e32-9cfb-95e9a86ba149"),
                            Name = "Chalandri"
                        },
                        new
                        {
                            Id = new Guid("a1662ff2-6e33-470b-a5e4-390ba9261934"),
                            Name = "Glyfada"
                        },
                        new
                        {
                            Id = new Guid("e9c3fbd2-1bc6-438d-b49f-adcd50ab734a"),
                            Name = "Vouliagmeni"
                        },
                        new
                        {
                            Id = new Guid("453ddb41-4d7d-4eae-bcc4-876a07ca27a6"),
                            Name = "Ilisia"
                        },
                        new
                        {
                            Id = new Guid("2b5b6792-cc41-4420-b11b-800e4b10409d"),
                            Name = "Ano Patisia"
                        },
                        new
                        {
                            Id = new Guid("17d6e2aa-8a6c-4994-a629-249cffe0362e"),
                            Name = "Kato Patisia"
                        },
                        new
                        {
                            Id = new Guid("7c7b35c3-f141-4bb5-a8bb-194b78ec33d9"),
                            Name = "Zografou"
                        },
                        new
                        {
                            Id = new Guid("68a2b965-4634-44ca-9bae-691a72336ff7"),
                            Name = "Aghia Paraskevi"
                        },
                        new
                        {
                            Id = new Guid("4f03d468-a782-495f-8580-17ceeaab1c70"),
                            Name = "Galatsi"
                        },
                        new
                        {
                            Id = new Guid("b5e9a153-3c2d-4c10-b35e-4f15a4afa8c8"),
                            Name = "Omonia"
                        },
                        new
                        {
                            Id = new Guid("33ce932a-7c6e-4db4-b652-aa86a16cbb5b"),
                            Name = "Sepolia"
                        },
                        new
                        {
                            Id = new Guid("7c39fb3e-a32c-41b8-bedc-f0d3deb68447"),
                            Name = "Ano Ilisia"
                        },
                        new
                        {
                            Id = new Guid("8eb41ffe-d199-4e8d-813e-0b9af3410583"),
                            Name = "Elliniko"
                        },
                        new
                        {
                            Id = new Guid("263f7aa7-ccc4-49fc-a363-15db04a25d14"),
                            Name = "Peristeri"
                        },
                        new
                        {
                            Id = new Guid("dd4ed16e-1a55-4325-b147-efb7e6e4b5a5"),
                            Name = "Kallithea"
                        },
                        new
                        {
                            Id = new Guid("669482b3-c52a-41c7-87f2-3549eb19c377"),
                            Name = "Moschato"
                        },
                        new
                        {
                            Id = new Guid("1d406e6f-8856-4a99-ae87-4cfe69ecd5c1"),
                            Name = "Tavros"
                        },
                        new
                        {
                            Id = new Guid("9711f858-2763-4127-a080-cd8544097856"),
                            Name = "Nikaia"
                        },
                        new
                        {
                            Id = new Guid("d8a13c89-70f9-4a76-89ef-21b6e516af0b"),
                            Name = "Agios Ioannis Rentis"
                        },
                        new
                        {
                            Id = new Guid("48cceb01-548a-4437-b038-6bae346a6014"),
                            Name = "Kifisia"
                        },
                        new
                        {
                            Id = new Guid("1f1a1bd0-0cfa-46fa-b9d5-5837a4979373"),
                            Name = "Vrilissia"
                        },
                        new
                        {
                            Id = new Guid("261f9af5-3b86-4bce-b1ab-b8294d172471"),
                            Name = "Melissia"
                        },
                        new
                        {
                            Id = new Guid("4f9efb4c-fc84-44b2-aeaf-6a9991809009"),
                            Name = "Agios Stefanos"
                        },
                        new
                        {
                            Id = new Guid("925d47af-4466-4e44-b661-353023188ec0"),
                            Name = "Ano Liosia"
                        },
                        new
                        {
                            Id = new Guid("8bec9098-9b4b-4453-9303-22fea666e23f"),
                            Name = "Varvakeios"
                        },
                        new
                        {
                            Id = new Guid("8a33b94e-8188-4c6e-b885-f885e6b78e72"),
                            Name = "Ambelokipi"
                        },
                        new
                        {
                            Id = new Guid("23c0d951-5442-4d57-a76e-8e4b6ec1bd13"),
                            Name = "Gyzi"
                        },
                        new
                        {
                            Id = new Guid("0925fd83-12e3-46b2-b871-988cabee88c3"),
                            Name = "Psychiko"
                        },
                        new
                        {
                            Id = new Guid("b6766109-7fdf-4647-94f8-791e8215dc09"),
                            Name = "Filothei"
                        },
                        new
                        {
                            Id = new Guid("ec1630a0-564b-417d-afc3-e3e36e096331"),
                            Name = "Argyroupoli"
                        },
                        new
                        {
                            Id = new Guid("9c1c9693-5c1a-4222-8ba7-98fe5f177504"),
                            Name = "Alimos"
                        },
                        new
                        {
                            Id = new Guid("21d652c3-f550-43fd-a499-afafbea86af1"),
                            Name = "Palaio Faliro"
                        },
                        new
                        {
                            Id = new Guid("733a3cb4-247a-4076-ae83-8bed9782569a"),
                            Name = "Kaisariani"
                        },
                        new
                        {
                            Id = new Guid("a5eb26ba-28fe-4a44-96ed-c111c7ab0890"),
                            Name = "Votanikos"
                        },
                        new
                        {
                            Id = new Guid("e15179ec-e657-4e6d-8074-0c40b47ab472"),
                            Name = "Kerameikos"
                        },
                        new
                        {
                            Id = new Guid("c45faaf8-19a5-4cfd-aeaa-85e50097e95e"),
                            Name = "Rizoupoli"
                        },
                        new
                        {
                            Id = new Guid("045b7d54-153b-47b9-816b-5d409fab9924"),
                            Name = "Aghios Eleftherios"
                        },
                        new
                        {
                            Id = new Guid("f83f414d-fe3b-4481-8535-f867af8c3707"),
                            Name = "Nea Smyrni"
                        },
                        new
                        {
                            Id = new Guid("5c3f8ce5-66da-4104-8c1f-40d58cb090b5"),
                            Name = "Aghios Artemios"
                        },
                        new
                        {
                            Id = new Guid("243b6f67-39dc-43fa-89d7-6355021db78d"),
                            Name = "Ano Petralona"
                        },
                        new
                        {
                            Id = new Guid("580e2d39-2cd6-46d4-8fce-2f6a98d73bac"),
                            Name = "Kaminia"
                        });
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HourlyRate")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Babysitters");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.BabysitterArea", b =>
                {
                    b.Property<Guid>("BabysitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BabysitterId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("BabysitterArea");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.CurriculumVitae", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BabySitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BabySitterId")
                        .IsUnique();

                    b.ToTable("CurriculumVitaes");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BabysitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BabysitterId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Appointment", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("Appointments")
                        .HasForeignKey("BabySitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.Customer", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", "User")
                        .WithOne("Babysitter")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.Babysitter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.BabysitterArea", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Area", "Area")
                        .WithMany("Babysitters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("SupportingAreas")
                        .HasForeignKey("BabysitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.CurriculumVitae", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithOne("CurriculumVitae")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.CurriculumVitae", "BabySitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Rating", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("Ratings")
                        .HasForeignKey("BabysitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Area", b =>
                {
                    b.Navigation("Babysitters");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CurriculumVitae")
                        .IsRequired();

                    b.Navigation("Ratings");

                    b.Navigation("SupportingAreas");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.User", b =>
                {
                    b.Navigation("Babysitter")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
