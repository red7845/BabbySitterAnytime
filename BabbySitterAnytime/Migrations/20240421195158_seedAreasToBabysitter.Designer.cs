// <auto-generated />
using System;
using BabbySitterAnytime.DataBaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BabbySitterAnytime.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240421195158_seedAreasToBabysitter")]
    partial class seedAreasToBabysitter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BabySitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BabySitterId");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b898c9a-6406-46cf-94cc-10043b90e91d"),
                            Name = "Syntagma"
                        },
                        new
                        {
                            Id = new Guid("2d6a9a6a-2302-45ce-b4c6-f6c17364156d"),
                            Name = "Plaka"
                        },
                        new
                        {
                            Id = new Guid("8f51a5c6-d272-4ffb-a1db-b50de7a23ee5"),
                            Name = "Monastiraki"
                        },
                        new
                        {
                            Id = new Guid("8796c020-5cf7-4837-8ffc-1c28bbf9c34a"),
                            Name = "Kolonaki"
                        },
                        new
                        {
                            Id = new Guid("05155d17-588a-4350-a08a-83fd98506add"),
                            Name = "Exarchia"
                        },
                        new
                        {
                            Id = new Guid("aa8ccfc2-0bec-4f84-bc7f-0c35de55c79e"),
                            Name = "Psiri"
                        },
                        new
                        {
                            Id = new Guid("99033a77-41b1-42e3-91ce-63b639f28684"),
                            Name = "Gazi"
                        },
                        new
                        {
                            Id = new Guid("886890ca-57db-4a86-8f86-f1a34a149956"),
                            Name = "Pangrati"
                        },
                        new
                        {
                            Id = new Guid("c18097bc-5bd2-43b2-b7c8-80c6e53e7e3c"),
                            Name = "Metaxourgeio"
                        },
                        new
                        {
                            Id = new Guid("387968d5-cc6d-4ef0-8e83-f2663118abfd"),
                            Name = "Koukaki"
                        },
                        new
                        {
                            Id = new Guid("c83105e7-ffd0-497f-b5ed-0e2efd5d905d"),
                            Name = "Kypseli"
                        },
                        new
                        {
                            Id = new Guid("cd00291b-f6f5-4b45-8bb9-b04989620209"),
                            Name = "Thissio"
                        },
                        new
                        {
                            Id = new Guid("537f1cae-e559-48ed-8566-73014b90eb01"),
                            Name = "Petralona"
                        },
                        new
                        {
                            Id = new Guid("611d69e6-4f25-41bc-8e39-1445cfb86f7a"),
                            Name = "Neapoli"
                        },
                        new
                        {
                            Id = new Guid("afb48079-7888-42dd-b5ec-23f9e430d096"),
                            Name = "Lykavittos"
                        },
                        new
                        {
                            Id = new Guid("3a6563f8-4d64-4aca-aed0-ad74cb36256a"),
                            Name = "Neos Kosmos"
                        },
                        new
                        {
                            Id = new Guid("42d144ea-0681-4461-a366-96487a1b70c4"),
                            Name = "Agios Dimitrios"
                        },
                        new
                        {
                            Id = new Guid("7f1a8778-7a62-4ede-80e3-9b8f04c42056"),
                            Name = "Piraeus"
                        },
                        new
                        {
                            Id = new Guid("41c0ae85-456f-4d78-b53e-973a47b0e95f"),
                            Name = "Marousi"
                        },
                        new
                        {
                            Id = new Guid("31c10c63-755c-4342-9bbd-d3e8575184fa"),
                            Name = "Chalandri"
                        },
                        new
                        {
                            Id = new Guid("4f3464b2-e1dd-4cfe-bb30-b1d9d6aae31c"),
                            Name = "Glyfada"
                        },
                        new
                        {
                            Id = new Guid("39e2d4a6-1283-46b7-a3af-897024f4e374"),
                            Name = "Vouliagmeni"
                        },
                        new
                        {
                            Id = new Guid("b3b1edcc-297b-4b0f-bd03-ea24a1511270"),
                            Name = "Ilisia"
                        },
                        new
                        {
                            Id = new Guid("758708b3-2a8c-4ad1-a948-daada4bd7d02"),
                            Name = "Ano Patisia"
                        },
                        new
                        {
                            Id = new Guid("9d4f4974-1f2c-4817-808a-74a902b77184"),
                            Name = "Kato Patisia"
                        },
                        new
                        {
                            Id = new Guid("b09c9ce9-4d6d-4f0d-ab46-589cb1816ebd"),
                            Name = "Zografou"
                        },
                        new
                        {
                            Id = new Guid("45ab70aa-b856-4e0c-bfe8-ef2206899a18"),
                            Name = "Aghia Paraskevi"
                        },
                        new
                        {
                            Id = new Guid("11687619-e5c5-4d54-a210-383705155376"),
                            Name = "Galatsi"
                        },
                        new
                        {
                            Id = new Guid("f73488d5-e3e6-4970-9262-549de2617d1d"),
                            Name = "Omonia"
                        },
                        new
                        {
                            Id = new Guid("4aaaf1f4-02ad-44d6-82e2-0a38122a60c3"),
                            Name = "Sepolia"
                        },
                        new
                        {
                            Id = new Guid("2ce77b3e-ded3-4353-9c07-3f8df2051426"),
                            Name = "Ano Ilisia"
                        },
                        new
                        {
                            Id = new Guid("8b60b49e-a594-4785-87f1-f597b6027565"),
                            Name = "Elliniko"
                        },
                        new
                        {
                            Id = new Guid("f00a414f-af7b-4ad7-9816-6c7f607e0edb"),
                            Name = "Peristeri"
                        },
                        new
                        {
                            Id = new Guid("85593b78-e7cb-4961-a5d3-f2c7138c5cbf"),
                            Name = "Kallithea"
                        },
                        new
                        {
                            Id = new Guid("e7f6935d-01d0-4fcf-b589-ef43c17728f2"),
                            Name = "Moschato"
                        },
                        new
                        {
                            Id = new Guid("0002523b-b1ce-44f3-bced-7e6e99c3e668"),
                            Name = "Tavros"
                        },
                        new
                        {
                            Id = new Guid("099ded45-eefa-4651-b910-6d19eb002180"),
                            Name = "Nikaia"
                        },
                        new
                        {
                            Id = new Guid("5833caa0-0064-402b-8f31-42c2d1ae5015"),
                            Name = "Agios Ioannis Rentis"
                        },
                        new
                        {
                            Id = new Guid("b52fea98-960d-4bf6-8062-2edc77dd258c"),
                            Name = "Kifisia"
                        },
                        new
                        {
                            Id = new Guid("de21883b-fb03-43b5-b842-1688d22609cc"),
                            Name = "Vrilissia"
                        },
                        new
                        {
                            Id = new Guid("4de9a9ed-3335-480f-867e-cbc6fdb30ace"),
                            Name = "Melissia"
                        },
                        new
                        {
                            Id = new Guid("4aa7b274-b04a-48e4-a725-492f2700859d"),
                            Name = "Agios Stefanos"
                        },
                        new
                        {
                            Id = new Guid("c3ab066b-db8e-4b43-9d1a-92111f7ac2d5"),
                            Name = "Ano Liosia"
                        },
                        new
                        {
                            Id = new Guid("da2dfb85-22bf-4578-8867-787eabbf3b49"),
                            Name = "Varvakeios"
                        },
                        new
                        {
                            Id = new Guid("86059151-8e04-45c7-9c2f-96ce8004625d"),
                            Name = "Ambelokipi"
                        },
                        new
                        {
                            Id = new Guid("7bed6bf9-d8dc-49af-8bcb-1ac3a65996b4"),
                            Name = "Gyzi"
                        },
                        new
                        {
                            Id = new Guid("50e1f459-4993-439e-937b-9a5a64a5b76c"),
                            Name = "Psychiko"
                        },
                        new
                        {
                            Id = new Guid("25c948d8-3c94-4854-aed2-3e494d23749f"),
                            Name = "Filothei"
                        },
                        new
                        {
                            Id = new Guid("22c5182b-e25d-4709-a57b-3ce5dc195f2a"),
                            Name = "Argyroupoli"
                        },
                        new
                        {
                            Id = new Guid("aa8b6521-06f7-4909-ba35-7bb8e005d35f"),
                            Name = "Alimos"
                        },
                        new
                        {
                            Id = new Guid("cf651dbc-a752-4723-b2a2-00599fddf141"),
                            Name = "Palaio Faliro"
                        },
                        new
                        {
                            Id = new Guid("29f3bd3c-b63c-4938-ae57-70e50834984c"),
                            Name = "Kaisariani"
                        },
                        new
                        {
                            Id = new Guid("c06c1d7e-c27e-4b81-a92c-fff621c65be8"),
                            Name = "Votanikos"
                        },
                        new
                        {
                            Id = new Guid("d6746c14-ab71-46de-b852-98315a98b6e2"),
                            Name = "Kerameikos"
                        },
                        new
                        {
                            Id = new Guid("58f8bc6f-4c05-4eed-bfe7-792d0a2ec64a"),
                            Name = "Rizoupoli"
                        },
                        new
                        {
                            Id = new Guid("f3862c29-06af-4225-af33-6d64419ab80e"),
                            Name = "Aghios Eleftherios"
                        },
                        new
                        {
                            Id = new Guid("0d4b5353-822a-40c6-8e75-8021f5109818"),
                            Name = "Nea Smyrni"
                        },
                        new
                        {
                            Id = new Guid("9c5fe774-226a-413a-8df2-3df476ed5b97"),
                            Name = "Aghios Artemios"
                        },
                        new
                        {
                            Id = new Guid("b43e08ec-5a6a-4e79-9137-067e34400760"),
                            Name = "Ano Petralona"
                        },
                        new
                        {
                            Id = new Guid("cbef4f26-45dc-482f-8808-98bb5f0bf766"),
                            Name = "Kaminia"
                        });
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Babysitters");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.BabysitterArea", b =>
                {
                    b.Property<Guid>("BabysitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BabysitterId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("BabysitterArea");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.CurriculumVitae", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BabySitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BabySitterId")
                        .IsUnique();

                    b.ToTable("CurriculumVitaes");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BabysitterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BabysitterId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Appointment", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("Appointments")
                        .HasForeignKey("BabySitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.Customer", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", "User")
                        .WithOne("Babysitter")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.Babysitter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.BabysitterArea", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Area", "Area")
                        .WithMany("Babysitters")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("SupportingAreas")
                        .HasForeignKey("BabysitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.CurriculumVitae", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithOne("CurriculumVitae")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.CurriculumVitae", "BabySitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BabbySitterAnytime.DataBaseModels.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Rating", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.Babysitter", "Babysitter")
                        .WithMany("Ratings")
                        .HasForeignKey("BabysitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BabbySitterAnytime.DataBaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Area", b =>
                {
                    b.Navigation("Babysitters");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Babysitter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CurriculumVitae")
                        .IsRequired();

                    b.Navigation("Ratings");

                    b.Navigation("SupportingAreas");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BabbySitterAnytime.DataBaseModels.User", b =>
                {
                    b.Navigation("Babysitter")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
